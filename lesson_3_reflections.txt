When would you want to use a remote repository rather than keeping all your work
local?

    I think it is smart to keep a remote repository because it allows for
    team collaboration regardless of where the team members are. It also provides
    a back-up in case your personal computer breaks down.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    I think you want it to be manual because Git, if it was automatic, could
    potentially pull changes too often without you having done anything
    substantial enough to require a commit. In addition, if you were working
    in a particular branch, Git could update and save your work in the wrong
    branch. Pulling changes manually allows the developer to have more
    control over the number of commits and be conscious of his work in
    relationship to what is saved on his local device, and what is hosted
    publically on Git.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?

    Forks - cloning repositories that are hosted on GitHub that are
        'owned' by other people, your code is in relationship to their code
        -- used to get access to someone's code that is online

    Clones - making direct copies of code from GitHub or a local computer
        -- used to work on code offline
        -- used when code doesn't require attribution, used to transfer
            code from online to offline since it can't be done via forking

    Branches - lineages of commits that can be hosted on GitHub and on a
        local computer, branches are what are cloned and forked
        -- when you save commits, you are saving them to branches
        -- branches are the names that you use to tell GitHub which ones
            to push/pull

What is the benefit of having a copy of the last known state of the remote
stored locally?

    It allows you to update the work that your fellow collaborators have been
    doing without interfering with the coding that you are doing. By having
    a last known state of the remote stored locally you can continue to work
    offline but still have access to coding that may have influence on your
    work.

How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    If I had to collaborate without using Git or GitHub I imagine that there
    would have to be some sort of real-time updated Excel sheet or some
    other type of database that would allow people to see if changes have been/
    or should be made to various coding sections. In addition, I'm sure that
    there would be more emails sent back-and-forth between team members.

    Easier:
        -- No need to learn new command line action

    Harder:
        -- Making sure that there are little errors in the updating copy/paste
            process
        -- Allowing people to be creative with code would be harder because
            keeping a "master" code would require an extremely detail
            oriented person who would have to see how the changes would
            interact with existing code
        -- Wouldn't allow for cloud/online sharing which would limit the
            developers you could work with on projects

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

   You would want to make changes to a seperate branch when you working on a new
   feature, prototyping a new design to get feedback, or simply writing some
   interesting code that you would not want to have on the master branch. By
   using a branch you can continue to code without worrying about it being seen
   by the public and/or causing problems for others with whom you are
   collaborating.

   Changes in the master:
    - Only have to update one set of code
    - People will always have the most updated version of code (even with all
        of its potential bugs)
    - Your team is always working on the same set of code

    Changes using branches:
    - Allows for collaborators to be adventurous without worrying about
        damaging the master branch
    - Allow for people to give you feedback throughout your process via the
        push merges
    - Allows for multiple projects to be happening simultaneously without
        a signficant amount of confusion or potental merging conflicts